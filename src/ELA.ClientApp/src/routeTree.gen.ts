/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './app/routes/__root'
import { Route as SignupRouteImport } from './app/routes/signup'
import { Route as SigninRouteImport } from './app/routes/signin'
import { Route as AppRouteRouteImport } from './app/routes/app/route'
import { Route as IndexRouteImport } from './app/routes/index'
import { Route as AppIndexRouteImport } from './app/routes/app/index'
import { Route as AppQuizRouteImport } from './app/routes/app/quiz'
import { Route as AppFlashcardRouteImport } from './app/routes/app/flashcard'
import { Route as AppDashboardRouteImport } from './app/routes/app/dashboard'
import { Route as AppVocabularyRouteRouteImport } from './app/routes/app/vocabulary/route'

const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const SigninRoute = SigninRouteImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRouteRoute = AppRouteRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppQuizRoute = AppQuizRouteImport.update({
  id: '/quiz',
  path: '/quiz',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppFlashcardRoute = AppFlashcardRouteImport.update({
  id: '/flashcard',
  path: '/flashcard',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppDashboardRoute = AppDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppVocabularyRouteRoute = AppVocabularyRouteRouteImport.update({
  id: '/vocabulary',
  path: '/vocabulary',
  getParentRoute: () => AppRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/signin': typeof SigninRoute
  '/signup': typeof SignupRoute
  '/app/vocabulary': typeof AppVocabularyRouteRoute
  '/app/dashboard': typeof AppDashboardRoute
  '/app/flashcard': typeof AppFlashcardRoute
  '/app/quiz': typeof AppQuizRoute
  '/app/': typeof AppIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/signin': typeof SigninRoute
  '/signup': typeof SignupRoute
  '/app/vocabulary': typeof AppVocabularyRouteRoute
  '/app/dashboard': typeof AppDashboardRoute
  '/app/flashcard': typeof AppFlashcardRoute
  '/app/quiz': typeof AppQuizRoute
  '/app': typeof AppIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/signin': typeof SigninRoute
  '/signup': typeof SignupRoute
  '/app/vocabulary': typeof AppVocabularyRouteRoute
  '/app/dashboard': typeof AppDashboardRoute
  '/app/flashcard': typeof AppFlashcardRoute
  '/app/quiz': typeof AppQuizRoute
  '/app/': typeof AppIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/signin'
    | '/signup'
    | '/app/vocabulary'
    | '/app/dashboard'
    | '/app/flashcard'
    | '/app/quiz'
    | '/app/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/signin'
    | '/signup'
    | '/app/vocabulary'
    | '/app/dashboard'
    | '/app/flashcard'
    | '/app/quiz'
    | '/app'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/signin'
    | '/signup'
    | '/app/vocabulary'
    | '/app/dashboard'
    | '/app/flashcard'
    | '/app/quiz'
    | '/app/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRouteRoute: typeof AppRouteRouteWithChildren
  SigninRoute: typeof SigninRoute
  SignupRoute: typeof SignupRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/signin': {
      id: '/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/quiz': {
      id: '/app/quiz'
      path: '/quiz'
      fullPath: '/app/quiz'
      preLoaderRoute: typeof AppQuizRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/flashcard': {
      id: '/app/flashcard'
      path: '/flashcard'
      fullPath: '/app/flashcard'
      preLoaderRoute: typeof AppFlashcardRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/dashboard': {
      id: '/app/dashboard'
      path: '/dashboard'
      fullPath: '/app/dashboard'
      preLoaderRoute: typeof AppDashboardRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/vocabulary': {
      id: '/app/vocabulary'
      path: '/vocabulary'
      fullPath: '/app/vocabulary'
      preLoaderRoute: typeof AppVocabularyRouteRouteImport
      parentRoute: typeof AppRouteRoute
    }
  }
}

interface AppRouteRouteChildren {
  AppVocabularyRouteRoute: typeof AppVocabularyRouteRoute
  AppDashboardRoute: typeof AppDashboardRoute
  AppFlashcardRoute: typeof AppFlashcardRoute
  AppQuizRoute: typeof AppQuizRoute
  AppIndexRoute: typeof AppIndexRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppVocabularyRouteRoute: AppVocabularyRouteRoute,
  AppDashboardRoute: AppDashboardRoute,
  AppFlashcardRoute: AppFlashcardRoute,
  AppQuizRoute: AppQuizRoute,
  AppIndexRoute: AppIndexRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRouteWithChildren,
  SigninRoute: SigninRoute,
  SignupRoute: SignupRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
